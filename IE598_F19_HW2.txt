#import data from desktop,delete the first row and first 2 columns
import pandas as pd
filepath="C:/Users/11816/Desktop/Treasury Squeeze test.csv"
df = pd.read_csv(filepath,header=None)
df2=df.drop([0])
df1=df2.drop([0,1],axis=1)

#let y= the column of sqeeze, change 'TRUE'and 'False' to '1' and '0'
#let X= the first 2 column,price_crossing and price_distortion to print the plot
#use map to make value's type int
import numpy as np
np_2d=np.array(df1)
y=np_2d[:,9]
for i in range(len(y)):
    if y[i]=='TRUE':
        y[i]=1
    else:
        y[i]=0
X=np_2d[:,[0,1]]
y=list(map(int,y))
X[:,0]=list(map(int,X[:,0]))
X[:,1]=list(map(int,X[:,1]))
print('Class labels:', np.unique(y))

#split data
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.3, random_state=1, stratify=y)

print('Labels counts in y:', np.bincount(y))
print('Labels counts in y_train:', np.bincount(y_train))
print('Labels counts in y_test:', np.bincount(y_test))

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
sc.fit(X_train)
X_train_std = sc.transform(X_train)
X_test_std = sc.transform(X_test)

from sklearn.linear_model import Perceptron
ppn = Perceptron(eta0=0.1, random_state=1)
ppn.fit(X_train_std, y_train)

y_pred = ppn.predict(X_test_std)
print('Misclassified samples: %d' % (y_test != y_pred).sum())

from sklearn.metrics import accuracy_score
print('Accuracy: %.2f' % accuracy_score(y_test, y_pred))

from matplotlib.colors import ListedColormap
import matplotlib.pyplot as plt
def plot_decision_regions(X, y, classifier, test_idx=None,
                          resolution=0.02):
    # setup marker generator and color map
    markers = ('s', 'x', 'o', '^', 'v')
    colors = ('red', 'blue', 'lightgreen', 'gray', 'cyan')
    cmap = ListedColormap(colors[:len(np.unique(y))])
    # plot the decision surface
    x1_min, x1_max = X[:, 0].min() - 1, X[:, 0].max() + 1
    x2_min, x2_max = X[:, 1].min() - 1, X[:, 1].max() + 1
    xx1, xx2 = np.meshgrid(np.arange(x1_min, x1_max, resolution),
                           np.arange(x2_min, x2_max, resolution))
    Z = classifier.predict(np.array([xx1.ravel(), xx2.ravel()]).T)
    Z = Z.reshape(xx1.shape)
    plt.contourf(xx1, xx2, Z, alpha=0.3, cmap=cmap)
    plt.xlim(xx1.min(), xx1.max())
    plt.ylim(xx2.min(), xx2.max())
    for idx, cl in enumerate(np.unique(y)):
        plt.scatter(x=X[y == cl, 0], y=X[y == cl, 1],
                    alpha=0.8, c=colors[idx],
                    marker=markers[idx], label=cl,
                    edgecolor='black')
        # highlight test samples
        if test_idx:
            # plot all samples
            X_test, y_test = X[test_idx, :], y[test_idx]
            plt.scatter(X_test[:, 0], X_test[:, 1],
                        c='', edgecolor='black', alpha=1.0,
                        linewidth=1, marker='o',
                        s=100, label='test set')
            
X_combined_std = np.vstack((X_train_std, X_test_std))
y_combined = np.hstack((y_train, y_test))
plot_decision_regions(X=X_combined_std,
                      y=y_combined,
                      classifier=ppn,
                      test_idx=range(630, 900))
plt.xlabel('price_crossing [standardized]')
plt.ylabel('price_distortion [standardized]')
plt.legend(loc='upper left')
plt.show()

import matplotlib.pyplot as plt
import numpy as np
def gini(p):return (p)*(1 - (p)) + (1 - p)*(1 - (1-p))
def entropy(p):return - p*np.log2(p) - (1 - p)*np.log2((1 - p))
def error(p):return 1 - np.max([p, 1 - p])
x = np.arange(0.0, 1.0, 0.01)
ent = [entropy(p) if p != 0 else None for p in x]
sc_ent = [e*0.5 if e else None for e in ent]
err = [error(i) for i in x]
fig = plt.figure()
ax = plt.subplot(111)
for i, lab, ls, c, in zip([ent, sc_ent, gini(x), err],
                           ['Entropy', 'Entropy (scaled)',
                            'Gini Impurity',
                            'Misclassification Error'],
                            ['-', '-', '--', '-.'],
                            ['black', 'lightgray',
                             'red', 'green', 'cyan']):
    line = ax.plot(x, i, label=lab,linestyle=ls, lw=2, color=c)
ax.legend(loc='upper center', bbox_to_anchor=(0.5, 1.15),
              ncol=5, fancybox=True, shadow=False)
ax.axhline(y=0.5, linewidth=1, color='k', linestyle='--')
ax.axhline(y=1.0, linewidth=1, color='k', linestyle='--')
plt.ylim([0, 1.1])
plt.xlabel('p(i=1)')
plt.ylabel('Impurity Index')
plt.show()

from sklearn.tree import DecisionTreeClassifier
tree = DecisionTreeClassifier(criterion='gini',
                              max_depth=4,
                              random_state=1)
tree.fit(X_train, y_train)
X_combined = np.vstack((X_train, X_test))
y_combined = np.hstack((y_train, y_test))
plot_decision_regions(X_combined,
                      y_combined,
                      classifier=tree,
                      test_idx=range(630, 900))
plt.xlabel('price_crossing [cm]')
plt.ylabel('price_distortion [cm]')
plt.legend(loc='upper left')
plt.show()

from pydotplus import graph_from_dot_data
from sklearn.tree import export_graphviz
dot_data = export_graphviz(tree,
                           filled=True,
                           rounded=True,
                           class_names=['TRUE',
                                        'FALSE'],
                                        feature_names=['price_crossing',
                                                       'price_distortion'],
                                                       out_file=None)
graph = graph_from_dot_data(dot_data)
graph.write_png('tree.png')

from sklearn.neighbors import KNeighborsClassifier
k_range=range(1,10)
scores=[]
for k in k_range:
    knn = KNeighborsClassifier(n_neighbors=k, p=2,
                               metric='minkowski')
    knn.fit(X_train_std, y_train)
    y_pred=knn.predict(X_test)
    scores.append(accuracy_score(y_test,y_pred))
    print(scores)

plot_decision_regions(X_combined_std, y_combined,
                      classifier=knn, test_idx=range(630,900))
plt.xlabel('price_crossing [standardized]')
plt.ylabel('price_distortion [standardized]')
plt.legend(loc='upper left')
plt.show()

print("My name is Binjie Xu")
print("My NetID is: binjiex2")
print("I hereby certify that I have read the University policy on Academic Integrity and that I am not in violation.")